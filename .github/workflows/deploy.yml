name: Build and Deploy TruLoad Backend

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Install DevOps Tools
      uses: Bengo-Hub/devops-k8s/.github/actions/install-devops-tools@main

    - name: Debug available secrets
      run: |
        echo "Checking which tokens are available..."
        [[ -n "${{ secrets.GH_PAT }}" ]] && echo "✅ GH_PAT is set" || echo "❌ GH_PAT not found"
        [[ -n "${{ secrets.GITHUB_SECRET }}" ]] && echo "✅ GITHUB_SECRET is set" || echo "❌ GITHUB_SECRET not found"
        [[ -n "${{ secrets.GITHUB_TOKEN }}" ]] && echo "✅ GITHUB_TOKEN is set (default, may lack cross-repo write)" || echo "❌ GITHUB_TOKEN not found"
        echo "Note: At least GH_PAT or GITHUB_SECRET must be set for cross-repo push to devops-k8s"

    - name: Set deployment variables
      run: |
        echo "DEPLOY=true" >> $GITHUB_ENV
        echo "SETUP_DATABASES=true" >> $GITHUB_ENV
        echo "DB_TYPES=postgres,redis,rabbitmq" >> $GITHUB_ENV
        echo "NAMESPACE=truload" >> $GITHUB_ENV
        echo "ENV_SECRET_NAME=truload-backend-env" >> $GITHUB_ENV
        echo "REGISTRY_SERVER=docker.io" >> $GITHUB_ENV
        echo "REGISTRY_NAMESPACE=codevertex" >> $GITHUB_ENV
        echo "VALUES_FILE_PATH=apps/truload-backend/values.yaml" >> $GITHUB_ENV
        echo "DEPLOYMENT_SUMMARY_TITLE=TruLoad Backend Deployment Summary" >> $GITHUB_ENV
        echo "DEPLOYMENT_SUCCESS_MESSAGE=TruLoad Backend deployment completed! The API should be accessible via the URLs above." >> $GITHUB_ENV
        echo "APPLICATION_DISPLAY_NAME=TruLoad Backend" >> $GITHUB_ENV

    - name: Run production deployment
      env:
        DOCKER_SSH_KEY: ${{ secrets.DOCKER_SSH_KEY }}
        KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GH_PAT: ${{ secrets.GH_PAT }}
        GITHUB_SECRET: ${{ secrets.GITHUB_SECRET }}
        REGISTRY_USERNAME: ${{ secrets.REGISTRY_USERNAME }}
        REGISTRY_PASSWORD: ${{ secrets.REGISTRY_PASSWORD }}
        GITHUB_SHA: ${{ github.sha }}
        DEPLOY: true
        SETUP_DATABASES: true
        DB_TYPES: postgres,redis,rabbitmq
        NAMESPACE: truload
        ENV_SECRET_NAME: truload-backend-env
        REGISTRY_SERVER: docker.io
        REGISTRY_NAMESPACE: codevertex
        VALUES_FILE_PATH: apps/truload-backend/values.yaml
        GIT_USER: ${{ secrets.GIT_USER }}
        GIT_EMAIL: ${{ secrets.GIT_EMAIL }}
        PROVIDER: contabo
        CONTABO_API: true
        # Database secrets and configuration
        POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}
        RABBITMQ_USERNAME: ${{ secrets.RABBITMQ_USERNAME }}
        RABBITMQ_PASSWORD: ${{ secrets.RABBITMQ_PASSWORD }}
        PG_DATABASE: truload
        # Contabo secrets
        CONTABO_CLIENT_ID: ${{ secrets.CONTABO_CLIENT_ID }}
        CONTABO_CLIENT_SECRET: ${{ secrets.CONTABO_CLIENT_SECRET }}
        CONTABO_API_USERNAME: ${{ secrets.CONTABO_API_USERNAME }}
        CONTABO_API_PASSWORD: ${{ secrets.CONTABO_API_PASSWORD }}
        # Deployment variables
        DEPLOYMENT_SUMMARY_TITLE: TruLoad Backend Deployment Summary
        DEPLOYMENT_SUCCESS_MESSAGE: TruLoad Backend deployment completed!
        APPLICATION_DISPLAY_NAME: TruLoad Backend
      run: |
        chmod +x build.sh
        export POSTGRES_PASSWORD="${POSTGRES_PASSWORD}"
        export REDIS_PASSWORD="${REDIS_PASSWORD}"
        export RABBITMQ_USERNAME="${RABBITMQ_USERNAME:-user}"
        export RABBITMQ_PASSWORD="${RABBITMQ_PASSWORD:-rabbitmq}"
        export PG_DATABASE="${PG_DATABASE:-truload}"
        ./build.sh

    - name: Tag and push :latest
      if: success()
      env:
        REGISTRY_USERNAME: ${{ secrets.REGISTRY_USERNAME }}
        REGISTRY_PASSWORD: ${{ secrets.REGISTRY_PASSWORD }}
      run: |
        set -e
        : "${REGISTRY_SERVER:=docker.io}"
        : "${REGISTRY_NAMESPACE:=codevertex}"
        IMAGE_REPO="${REGISTRY_SERVER}/${REGISTRY_NAMESPACE}/truload-backend"
        SHORT_SHA=${GITHUB_SHA::8}
        echo "Tagging ${IMAGE_REPO}:${SHORT_SHA} as :latest and pushing"
        echo "$REGISTRY_PASSWORD" | docker login "$REGISTRY_SERVER" -u "$REGISTRY_USERNAME" --password-stdin
        docker pull "${IMAGE_REPO}:${SHORT_SHA}" || true
        docker tag "${IMAGE_REPO}:${SHORT_SHA}" "${IMAGE_REPO}:latest"
        docker push "${IMAGE_REPO}:latest"

    - name: Verify API health
      if: success()
      env:
        KUBE_CONFIG_B64: ${{ secrets.KUBE_CONFIG }}
        NS: truload
      run: |
        if [ -z "${KUBE_CONFIG_B64}" ]; then
          echo "⏭️ Skipping health check - no KUBE_CONFIG available"
          exit 0
        fi

        echo "::group::Health check"
        mkdir -p ~/.kube
        echo "$KUBE_CONFIG_B64" | base64 -d > ~/.kube/config

        # Ensure deployment is rolled out
        kubectl rollout status deployment/truload-backend -n ${NS} --timeout=300s || true

        # Try ingress health endpoint(s)
        HOSTS=$(kubectl get ingress -n ${NS} -o jsonpath='{.items[*].spec.rules[*].host}' | tr ' ' '\n' | grep -E 'api.*truload' || true)
        if [ -n "$HOSTS" ]; then
          STATUS=1
          for H in $HOSTS; do
            echo "Checking https://$H/health ..."
            if curl -sk --max-time 10 "https://$H/health" | grep -Ei "ok|healthy" >/dev/null; then
              echo "✅ Health OK for $H"
              STATUS=0
              break
            fi
          done
          if [ $STATUS -ne 0 ]; then
            echo "⚠️ Health endpoint did not return OK; rollout completed but endpoint may still be initializing"
          fi
        else
          echo "No ingress host found; skipping external health probe"
        fi
        echo "::endgroup::"


